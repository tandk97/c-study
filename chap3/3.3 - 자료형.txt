3.3 자료형

1. 자료형(Data type)
실제로 메모리를 사용하는 단위
built-in Data type
빈도가 높은 자료형은 예약어로 제공된다.(정수 같은 경우 1,2,4바이트를 제공)

user-defined Data type
배열, 포인터, 구조체 같은 것들은 사용자가 만들어서 사용하게 된다.

정수형 자료형
정수값을 메모리에 저장하기 위해 사용하는 자료형

실수형 자료형
실수값을 메모리에 저장하기 위해 사용하는 자료형


2. 정수를 표현하는 자료형 char(character)
signed char : 부호가 있는 1바이트 저장 공간
ex)
	signed char temperature;
	temperature = -2; --> 영하 2도를 temperature 변수에 저장

unsigned char : 부호가 없는 1바이트 저장 공간
unsigned char age;
age = 52; --> 나이 52살을 age 변수에 저장함

기온 - 부호가 존재하고 범위가 크지 않다 음수, 양수가 필요하고 -128~127사이의 데이터를 저장할 크기면 적당한 것이다
따라서 signed char를 쓰는 것이 적당하다.
우리가 자료형을 정확하게 잘 쓰기 위해서는 주변의 데이터 저옵를 어떤 크기의 데이터로 저장할지 고민하는 것이 좋다


C언어에서 1바이트라고 하지 않고 char라고 하는 이유?

컴퓨터에서 문자를 저장할 때는 아스키코드 표의 숫자로 변환하여 저장하는데 아스키 코드는 0~255 즉 1바이트 메모리 공간에 다 저장이 가능하다.
우리가 컴퓨터에서 문자를 저장할 때 1바이트 이상을 사용하게 되면 낭비 일 수 있다.
부작용 - 프로그래머들이 char타입에 문자만 저장해야 한다는 선입견이 생겨버림

정수를 표현하는 자료형 char는 1바이트이다.

1바이트가 -128~127 / 0~255까지 가능하지만 범위가 작으므로 더 큰 정수를 다루기 위해 C언어에서는 integer타입을 제공한다.


3. 정수를 표현하는 자료형 short int - 2Bytes
signed short int : 부호가 있는 2바이트 저장 공간
signed short int dday;
dday = -20; --> d-day가 -20일 남았다고 dday 변수에 저장

unsigned short int : 부호가 없는 2바이트 저장 공간
unsigned short int seconds;
seconds = 35000; --> 3만5천초를 seconds 변수에 저장한 것

short int는 2바이트 저장 공간으로 2^16 0~65535 / -32768~32767 범위를 표현 할 수 있다.


4. 정수를 표현하는 자료형 long int - 4Bytes
signed long int : 부호가 있는 4바이트 저장 공간
signed long int money;
money = 7000000; --> 700만원을 money변수에 저장

unsigned long int : 부호가 없는 4바이트 저장 공간
unsigned long int time_seconds;
time_seconds = 145310624; --> 1970년 1월 1일 부터 현재까지의 시간을 초단위로 환산한 다음 time_seconds 변수에 저장함

long int는 2^32 0~4294967295 / -2147483648~2147483647 범위를 표현 할 수 있다.

이 범위들에서도 표현하지 못한다면 64비트 8바이트 저장 공간을 사용해야 한다
ex) long long int

C언어는 생략형 표현을 제공하는데
signed char -> char
singed short int -> short
unsigned short int -> unsigned short
signed long int -> int
unsigned long int -> unsigned int


5. 실수를 표현하는 자료형

부동소수점
실수를 표현할 때 소수점의 위치를 고정하지 않고 소수점의 위치를 나타내는 수를 따로 작성하는 방식을 부동소수점(floating-point)표현 방식이라고 한다.
C언어는 실수를 저장하기 위해 4바이트와 8바이트 자료형을 제공한다.
ex)
	312.567 --> 3.12567*10^2 --> 3.12567E2
	이 방식은 IEEE 754 규약에 정의되어 있다.

고정소수점
일정한 위치에 소수점의 위치를 고정하여 숫자를 나열하는 방법이다.
ex)
	53.8 --> 000538000
	123.45 --> 001234500


float - 4바이트 - -1.2E-38 ~ 3.4E38
부호비트 1비트, 지수부 8비트, 가수부 23비트로 32비트 구성
소수점 6개 이하로는 오류가 발생하게 된다.

double - 8바이트 - -2.2E-308 ~ 1.8E308
부호비트 1비트, 지수부 11비트, 가수부 52비트로 64비트 구성
double은 소수점 14자리까지 안전하게 저장이 가능하다.

C언어는 부동소수점 방식으로 실수를 표현하게 된다.
BIAS - 편향지수
BIAS 값이 127이면 127은 0이라는 뜻이다.