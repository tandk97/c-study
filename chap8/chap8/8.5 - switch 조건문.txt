8.5 switch 조건문

1. if문이 비효율적인 경우
a. C언어에서는 모든 조건문을 if문으로 표현가능
b. 정해진 상수를 여러 번 비교하는 경우 if~else if~else문보다 switch문이 효율적


2. switch 조건문의 기본 구조
a. 상수와 직접적으로 비교하는 조건 형식에 유리한 문법 구조
b. 수식을 처리하여 얻은 결과 값을 각 case문에 있는 상수 값과 비교하여 명령문 수행
c. 비교 대상이 상수가 아닌 경우 사용 불가


3. break문
a. 현재 수행되는 case문의 작업을 중단
b. 프로그래머의 의도에 따라 switch문에서 break생략가능 -> break문을 만날 때 까지 다음 case문의 명령문을 수행


4. default문
a. 수식의 결과 값이 case문을 사용해 열거한 상수들과 일치하는 값이 없는 경우 수행할 명령을 적는 곳
b. if 조건문의 else문과 동일한 역할
c. 반드시 사용해야 하는 것은 아니기 때문에 생략 가능
d. 자유롭게 위치 설정 가능 -> case문과 case문 사이 이 경우 break를 생략하지 않고 꼭 같이 적어주도록 하자


5. switch 조건문
a. 수식의 결과 값 또는 변수의 값을 여러 개의 상수 값과 비교하는 것이 장점
b. case문에 변수를 적을 수 없기 때문에 비교 대상이 상수가 아닌 경우 switch 문을 사용할 수 없다는 것이 단점

switch 조건문 예시
명령문1;
switch(수식 또는 변수)
{
	case 상수1:
		명령문2;
		break;
	case 상수2:
		명령문3;
		break;
	default:
		명령문4;
		break;
}
명령문5;
위 case 상수2:에서 break를 제거하면 상수2에서 참이여도 명령문3을 수행한 후 명령문 4를 수행한다. 이후 break되고 명령문5를 수행한다.
아무 것에도 해당되지 않는다면 default의 명령문4만 수행하고 명령문5를 수행한다.
소스 코드가 길어지는 경우 한 줄에 여러 줄의 명령문을 작성할 수 있다.
case문에는 변수가 사용 불가능