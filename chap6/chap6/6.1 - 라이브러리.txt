6.1 라이브러리

1. 라이브러리
라이브러리 파일이 등장한 이유

test1.c(변경 없음)	----->	test1.obj(변경 없음)	----->
					컴파일X
test2.c(변경 됨)		----->	test2.obj(새로 만듦)	-----> 링크 ----> test.exe
					컴파일O
test3.c(변경 없음)	----->	test3.obj(변경 없음)	----->
					컴파일X
test.c가 바뀔 가능성이 없다면 보통 프로젝트 파일에서 빼고 다른 곳에 보관하고 프로젝트 자체에 test3.obj를 직접 넣어서 사용하기도 한다.


test1.c(변경 없음)	----->	test1.obj(변경 없음)	----->
					컴파일X
test2.c(변경 됨)		----->	test2.obj(새로 만듦)	-----> 링크 ----> test.exe
					컴파일O
test3.obj(변경 불가)	--------------------------------->
자신이 작업하는 소스 파일 목록 중에서 변경 가능성이 없는 파일들을 다른 곳에 보관해두고, 소스 파일 대신 목적 파일을 소스 목록에 포함시켜 작업하여 효율성을 높인다.
위처럼 사용하면 obj파일이 원래 저 용도로 사용되는 것이 아니기 때문에 비효율적인 부분이 존재하게 되고 이것을 개선한 것이 라이브러리 파일이다.


obj 파일의 목적
컴파일 시간을 줄여주기 위함


라이브러리
a. C언어에서 좀 더 효과적으로 함수를 관리할 수 있도록 제공하는 기술
b. 지속적으로 업데이트가 필요한 함수들만 소스 파일에 유지하고 나머지 거의 내용이 바뀌지 않는 함수들을 따로 분리하여 라이브러리로 관리
c. 소스 코드를 공개하지 않고 자신이 만든 함수를 다른 프로그래머에게 제공하고 싶은 경우 사용


오브젝트 파일은 모든 함수가 실행 파일에 포함된다.
test1.c
void main()	|							링크
{			|------>	test1.obj	--------->		test.exe
	Add();	|컴파일		|main 함수의	|			|test.exe	|
}			|			|기계어		|			|main		|
												|Add 기계어	|
test2.obj------------------------------------>	|Sub 기계어	|
|Add 함수의 기계어|								main에서는 Add만 사용했는데
|Sub 함수의 기계어|								Sub도 포함되어 있다.

라이브러리를 사용하게 되면
test1.c ----->	test1.obj	--->
		컴파일				링크	---------> test.exe(main, Add 기계어)
test2.lib --------------------->
사용하지 않은 Sub함수의 기계어는 실행 파일에 포함되지 않는다.