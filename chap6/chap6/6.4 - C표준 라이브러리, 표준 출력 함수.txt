6.4 C표준 라이브러리, 표준 출력 함수
C언어는 상황에 따른 변화에 대처할 수 있도록 C표준 라이브러리(C Standard Library)를 제공한다.

a. 운영 체제 별로 화면에 문자 A를 출력하는 과정과 방법이 다름
b. C언어가 문자 출력 기능을 문법으로 제공한다면 환경이 변화 했을 때 이를 수용하기 위해 C언어 문법(컴파일러의 소스 코드 변경)까지 변경해야 하는 문제가 발생하게 된다.
c. C언어는 시스템에 영향을 받는 요소들은 고정된 문법으로 제공하지 않는다.
d. C언어는 자신의 기능을 확장하기 위해 함수라는 개념을 제공한다. 하지만 프로그래머가 직접 문자 출력 함수를 만드는 것은 어려운 일이다.
e. C언어 표준함수
C언어 컴파일러를 만든 회사에서 운영체제 별로 다양한 기능을 구현하여 제공하는 함수
C표준 라이브러리 - C언어 표준 함수들이 정의된 라이브러리


1. 표준 출력
a. 표준 출력이란 해당 시스템이 가장 기본으로 사용하는 출력 방식
b. 프로그래머가 프로그램을 만들 때 해당 시스템에서 표준인 출력 방식 중 하나를 선택하여 원하는 정보를 전달할 수 있다.


2. 표준 출력 함수
a. putchar, putc : 단일 문자 출력 함수
putchar(65); --> 아스키 값 65에 해당하는 문자 A가 출력됨
putchar('A'); --> 문자 A가 출력됨

b. puts : 문자열 출력 함수
puts("Hi~"); --> "Hi~" 출력 후에 줄 바꿈이 일어난다.

c. printf : 문자열 출력 함수


3. printf 함수(print + format)
표준 출력 함수 중에서 가장 많이 사용하는 함수
형식화된 문자열을 출력할 수 있다.
%서식 지정 키워드는 C언어의 문법은 아니다.

a. printf 함수 사용법
%서식 지정 키워드를 사용하여 변수 값을 일정한 형식으로 출력 가능하다.
키워드		%d				%f		%c		%s
출력형식		정수(10진수)		실수		문자		문자열

int data = 5;
printf("%d", data); --> data변수에 저장된 5라는 정수를 출력

int data1 = 3;
int data2 = 5;
printf("%d %d", data1, data2); --> data1, data2에 저장된 정수를 출력 --> 출력 결과 : 3 5

int step = 5;
int value = 3*step;
printf("3*%d=%d", step, value);
첫 번째 %d는 step과 짝이 되고 두 번째 %d는 value와 짝을 이룬다.
출력 결과 : 3*5=15

%d와 %u는 변수 큭를 4바이트 값으로 변환하여 출력
1	1	1	1	1	1	1	1 ----- 8비트
char형에서
부호가 있는 경우 최댓값 -1
부호가 없는 경우 최댓값 255
char data = -1;
printf("%d, %u", data, data); ---> -1, 255
실제로는 -1, 4294967295
char는 1바이트인데 int는 4바이트 크기이다.
데이터가 %d에 저장될 때 1바이트에서 4바이트로 저장된다.
int 정수 최댓값 -1이 4바이트 정수 최댓값으로 바뀌게 된다.
따라서 %u가 255가 아닌 4294967295를 출력하게 된다.


4. %키워드 중심의 출력 특성 확인하기
a. char형
printf("65의 ASCII값은 %c입니다.", 65); --> 65의 ASCII값은 A입니다.

char data = 65;
printf("%c의 ASCII값은 %d입니다.", data, data); --> 첫 번째 data는 %c와 짝이 되고 두 번째 data는 %d와 짝을 이룬다 --> A의 ASCII값은 65입니다.
%뒤에 무엇이 오는지를 더 중요하게 판단한다.

b. 실수와 정수는 숫자를 표현하는 방식이 다르다.
float value = 2.1f;
printf("%f", value); ---> 2.1000000

float value = 2.1f;
printf("%f, %d", value, value); ---> 2.1000000, -107374182
실수 데이터를 정수 표현 키워드로 출력하면 엉뚱한 값(0xC0000000)이 출력된다.

c. %o는 8진수, %x는 16진수 형태로 정수를 출력
int data1 = 10;	--> 10진수로 8
int data2 = 010;	--> 10진수로 8
int data3 = 0x10;	--> 10진수로 16
printf("%x, %d, %o", data1, data2, data3); --> a, 8, 20

d. %e는 실수를 지수 형태로 출력
float data = 12.34;
printf("%f, %e, %E", data); ---> 12.340000, 1.234000e+01, 1.234000E+01

e. 출력 칸 수 조절하기
int data = 7;
printf("[%d][%5d]", data, data); ---> [7][    7]

f. 오른쪽 정렬과 왼쪽 정렬
int data = 7;
printf("[%5d][%05d][%-5d]", data, data, data); ---> [    7][00007][7    ]
%5d - 오른쪽 정렬 / %-5d - 왼쪽 정렬

g. 콘솔 모드에서 출력되는 문자의 개수와 위치
가로 80칸, 세로 25줄까지 기본 콘솔창에서 출력해 준다.

h. 출력 문자열을 정렬하는 이유
|9|9|9|9|9|
| | | |5|0|
| |1|9|3|2|
출력할 문자의 개수보다 칸을 더 사용하여 다음과 같이 출력하면 비난과 숫자가 마치 그래프처럼 표시되어 어느정도 범위의 값인지 알 수 있다.
아날로그는 범위에서 가지고 있는 값이 얼마나 큰지 직관적으로 빠르게 판단 가능하지만 디지털은 범위를 주지 않으면 파악하기가 힘들다.

i. 실수의 소수점 자릿 수 지정하기
마침표를 사용하여 출력할 소수점 이하 자릿수를 지정할 수 있다.
%전체칸수.소수점자릿수f
double data = 3.14159;
printf("[%f][%.4f][%8.4f][%-8.4f]", data, data, data, data);
-----> [3.141592][3.1416][  3.1416][3.1416  ]
.도 포함하여 자릿수를 계산한다.
%.f 사용 시 버려지는 부분은 반올림 되는 것을 조심해야 한다.

j. printf 함수에서 %출력
printf함수에서 %자체를 출력하고 싶으면 %%라고 쓰면 된다.
printf("95%%");


5. 제어 코드 사용하기
아스키 표에는 소리를 내거나 콘솔의 출력과 입력의 현재 위치를 알려주는 캐럿(Caret, 문자로 깜빡임)위치를 변경할 수 있는 제어 코드가 있다.
새로운 출력이 발생하거나 키보드에서 입력이 시작되면 캐럿 위치부터 문자가 출력된다.
제어 코드는 키보드에 있는 문자가 아니기 때문에 제어 코드를 직접 입력할 수 없기 때문에 C언어는 \(백슬래시)와 키워드로 제어 코드를 사용할 수 있는 문법을 제공한다.
제어 코드는 모든 표준 출력 함수에서 사용 가능하다.

제어코드			기능
\n				캐럿을 다음 줄로 이동(Line Feed)
\r				캐럿을 해당 줄의 처음으로 이동(Carriage Return)
\t				캐럿을 한 탭 만큼 이동
\b				캐럿을 바로 앞 칸으로 이동
\a				시스템 스피커로 경고음 발생
\"				큰 따옴표 출력
\'				작은 따옴표 출력

\는 키워드의 원래 의미를 없애는 용도로도 사용 가능하다.
큰 따옴표를 출력하고 싶어서 printf(""Hello"");라고 적으면 오류가 발생하게 된다.
Hello가 문자열로 처리되지 않기 때문인데 이를 해결하고 오류를 방지하기 위해
printf(" \"Hello\" "); 라고 적으면 출력이 가능하다. \도 키워드로 사용되므로 \를 출력하고 싶으면 \\을 적어 주면 된다.